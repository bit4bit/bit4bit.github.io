<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bit4bit</title>
    <link>https://bit4bit.github.io/</link>
    <description>Recent content on Bit4bit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-co</language>
    <lastBuildDate>Sun, 09 Aug 2015 16:50:44 -0500</lastBuildDate>
    <atom:link href="https://bit4bit.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>remoton_desktop</title>
      <link>https://bit4bit.github.io/post/es/codigo/remoton_desktop/</link>
      <pubDate>Sun, 09 Aug 2015 16:50:44 -0500</pubDate>
      
      <guid>https://bit4bit.github.io/post/es/codigo/remoton_desktop/</guid>
      <description>

&lt;h1 id=&#34;remoton-desktop:541e73dc62f634e5cbc1f5743562ab4f&#34;&gt;Remoton - Desktop&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1474826/8950994/543baebc-358e-11e5-886c-d4c440d3417f.png&#34; alt=&#34;remoton&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Usa &lt;a href=&#34;http://godoc.org/github.com/bit4bit/remoton&#34;&gt;Remoton&lt;/a&gt; y &lt;a href=&#34;http://xpra.org&#34;&gt;XPRA&lt;/a&gt; para crear una plataform de acceso remoto,
Un reemplazo libre para &lt;strong&gt;TeamViewer/Logmein/etc..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/bit4bit/remoton&#34;&gt;Mas Detalles&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;uso:541e73dc62f634e5cbc1f5743562ab4f&#34;&gt;Uso&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/bit4bit/remoton/releases&#34;&gt;Descargar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El procedimiento seria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;instalar &lt;strong&gt;remoton-server&lt;/strong&gt; en un servidor local o publico.&lt;/li&gt;
&lt;li&gt;crear certificados con &lt;strong&gt;remoton-server-cert&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;correr &lt;strong&gt;remoton-server&lt;/strong&gt; con los respectivos certificados&lt;/li&gt;
&lt;li&gt;instalar &lt;strong&gt;remoton-client-desktop&lt;/strong&gt; a los usuarios que se da soporte&lt;/li&gt;
&lt;li&gt;instalar &lt;strong&gt;remoton-support-desktop&lt;/strong&gt; a los usuarios que dan el soporte&lt;/li&gt;
&lt;li&gt;compartir el certificado &lt;strong&gt;cert.pem&lt;/strong&gt; de forma segura a todos los usuarios.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;servicio:541e73dc62f634e5cbc1f5743562ab4f&#34;&gt;Servicio&lt;/h2&gt;

&lt;p&gt;Si no tienes un servidor o tienens dificultades o inclusive deseas
una personalización contacta con la empresa
&lt;a href=&#34;http://www.neurotec.co/&#34;&gt;Neurotec&lt;/a&gt; que puede brindarte diferentes soluciones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>remoton</title>
      <link>https://bit4bit.github.io/post/es/codigo/remoton/</link>
      <pubDate>Sun, 09 Aug 2015 16:47:42 -0500</pubDate>
      
      <guid>https://bit4bit.github.io/post/es/codigo/remoton/</guid>
      <description>

&lt;h1 id=&#34;remoton:2b3c6367a16ff82902dbbaa8e2c9f903&#34;&gt;Remoton&lt;/h1&gt;

&lt;p&gt;Libreria para construir servicios en red. Permite crear una interfaz -net.Listen-
en el servidor y marcar a -net.Dial- a la interfaz para simular una red centralizada.&lt;/p&gt;

&lt;p&gt;Más detalles en &lt;a href=&#34;http://godoc.org/github.com/bit4bit/remoton&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>redchan</title>
      <link>https://bit4bit.github.io/post/es/codigo/redchan/</link>
      <pubDate>Mon, 16 Feb 2015 16:57:36 -0500</pubDate>
      
      <guid>https://bit4bit.github.io/post/es/codigo/redchan/</guid>
      <description>

&lt;h1 id=&#34;redchan:9e888d547b41acfab7d4a21e9645b8a0&#34;&gt;RedChan&lt;/h1&gt;

&lt;p&gt;Deslocalizando los canales de &lt;em&gt;Go&lt;/em&gt; con &lt;em&gt;Redis&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tutorial:9e888d547b41acfab7d4a21e9645b8a0&#34;&gt;TUTORIAL&lt;/h2&gt;

&lt;p&gt;Para esto necesitamos instalar el paquete &lt;strong&gt;glivo&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/bit4bit/redchan
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;inicializacion:9e888d547b41acfab7d4a21e9645b8a0&#34;&gt;INICIALIZACION&lt;/h3&gt;

&lt;p&gt;Para crear un canal usando &lt;strong&gt;Redis&lt;/strong&gt; como transporte usamos la estructura &lt;strong&gt;RedisChannel{&amp;ldquo;uuid&amp;rdquo;, 0}&lt;/strong&gt; , siendo el primer parametro  el identificador unico del canal usado tanto para recibir como para enviar, el segundo parametro es el tamano de &lt;strong&gt;Buffer&lt;/strong&gt; antes de bloquear la gorutina.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;# Creacion de un canal sin buffer
redisChannel := RedisChannel{&amp;quot;uuid&amp;quot;, 0}

# Creacion de un canal con buffer
redisChannel := RedisChannel{&amp;quot;uuid&amp;quot;, 10}

# Al finalizar el uso del canal lo cerramos llamando *Close*
defer redisChannel.Close()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;uso:9e888d547b41acfab7d4a21e9645b8a0&#34;&gt;USO&lt;/h3&gt;

&lt;p&gt;Ahora creamos los canales para enviar la data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;#buffered
sendCh, sendErr := redchan.Send(redisChannel, 0)
if sendErr != nil {
    t.Fatal(sendErr)
}

#unbuffered
sendCh, sendErr := redchan.Send(redisChannel, 1)
if sendErr != nil {
    t.Fatal(sendErr)
}

#Atencion con los parentesis
sendCh() &amp;lt;- []byte(&amp;quot;data&amp;quot;)

#Al finalizar el canal se notifica el receptor tal como los canales de *Go*
close(sendCh())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tambien podemos crear varios canales &lt;em&gt;Go&lt;/em&gt; por un canal &lt;em&gt;RedChan&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;chanA, chanAErr := redchan.Send(redisChannel)
if chanAErr != nil {
    t.Fatal(chanAErr)
}
chanB, chanBErr := redchan.Send(redisChannel)
if chanBErr != nil {
	t.Fatal(chanBErr)
}

go func(){
 chanA() &amp;lt;- []byte(&amp;quot;data a&amp;quot;)
 close(chanA())
}()

go func(){
 chanB() &amp;lt;- []byte(&amp;quot;data b&amp;quot;)
 close(chanB())
}()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora recibimos la data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;recvCh, recvErr := redchan.Recv(redisChannel)
if recvErr != nil {
        t.Fatal(recvErr)
}

&amp;lt;-recvCh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;o bien podemos crear varios receptores sobre un &lt;strong&gt;RedChan&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;recvACh, recvAErr := redchan.Recv(redisChannel)
if recvAErr != nil {
        t.Fatal(recvAErr)
}

recvBCh, recvBErr := redchan.Recv(redisChannel)
if recvAErr != nil {
        t.Fatal(recvBErr)
}

&amp;lt;-recvACh
&amp;lt;-recvBCh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recordemos que al usar &lt;strong&gt;Redis&lt;/strong&gt;, podemos conectarnos desde diferentes maquinas desde que se comparta el mismo identificador de canal.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gami</title>
      <link>https://bit4bit.github.io/post/es/codigo/gami/</link>
      <pubDate>Fri, 06 Feb 2015 19:05:45 -0500</pubDate>
      
      <guid>https://bit4bit.github.io/post/es/codigo/gami/</guid>
      <description>

&lt;h1 id=&#34;gami-asterisk-manager-interface-go-lang:01ff7a9fe7af4a56df813efe8d79542a&#34;&gt;GAMI Asterisk Manager Interface (GO Lang)&lt;/h1&gt;

&lt;p&gt;Libreria para comunicarse con &lt;strong&gt;AMI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Más detalles en &lt;a href=&#34;https://github.com/bit4bit/gami&#34;&gt;https://github.com/bit4bit/gami&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>glivo</title>
      <link>https://bit4bit.github.io/post/es/codigo/glivo/</link>
      <pubDate>Thu, 07 Aug 2014 16:57:36 -0500</pubDate>
      
      <guid>https://bit4bit.github.io/post/es/codigo/glivo/</guid>
      <description>

&lt;h1 id=&#34;glivo:2bb1f7343f595e18e448b1a2c1aaa8c1&#34;&gt;GLIVO&lt;/h1&gt;

&lt;p&gt;Sencillo kit de herramientas para el desarrollo aplicaciones &lt;strong&gt;IVR&lt;/strong&gt; desde el lenguaje &lt;strong&gt;GO&lt;/strong&gt;
y &lt;strong&gt;Freeswitch&lt;/strong&gt; haciendo uso del mod&amp;rsquo;ulo &lt;a href=&#34;https://wiki.freeswitch.org/wiki/Mod_event_socket&#34;&gt;&lt;strong&gt;mod_event_socket&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tutorial:2bb1f7343f595e18e448b1a2c1aaa8c1&#34;&gt;TUTORIAL&lt;/h2&gt;

&lt;p&gt;Para esto necesitamos instalar el paquete &lt;strong&gt;glivo&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go get github.com/bit4bit/glivo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;inicializaci-on-de-glivo:2bb1f7343f595e18e448b1a2c1aaa8c1&#34;&gt;Inicializaci&amp;rsquo;on de Glivo&lt;/h3&gt;

&lt;p&gt;El procedimiento general  &lt;strong&gt;Glivo&lt;/strong&gt; es crear un socket en la interfaz y puerto al que se comunicar&amp;rsquo;a el &lt;strong&gt;Freeswitch&lt;/strong&gt;, para esto usamos la funci&amp;rsquo;on &lt;strong&gt;glivo.NewSession&lt;/strong&gt; del paquete en conjunto con &lt;strong&gt;net.Listener&lt;/strong&gt; o bien podemos directamente la funci&amp;rsquo;on &lt;strong&gt;glivo.Listen&lt;/strong&gt; del paquete &lt;strong&gt;Glivo&lt;/strong&gt;, miremos:&lt;/p&gt;

&lt;h4 id=&#34;glivo-newsession:2bb1f7343f595e18e448b1a2c1aaa8c1&#34;&gt;glivo.NewSession&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;net&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;github.com/bit4bit/glivo&amp;quot;
)

func main() {
	listen, listenErr := net.Listen(&amp;quot;tcp&amp;quot;, &amp;quot;localhost:5050&amp;quot;)
	if listenErr != nil {
		log.Fatal(listenErr)
	}
	
	socket = glivo.NewSession(listen)
	defer socket.Close()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;glivo-listen:2bb1f7343f595e18e448b1a2c1aaa8c1&#34;&gt;glivo.Listen&lt;/h4&gt;

&lt;p&gt;Nos permite abrir el la direcci&amp;rsquo;on &lt;strong&gt;TCP&lt;/strong&gt; indicada directamente.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;net&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;github.com/bit4bit/glivo&amp;quot;
)

func main() {
	socket, socketErr := glivo.Listen(&amp;quot;localhost:5050&amp;quot;)
	if socketErr != nil {
		log.Fatal(socketErr)
	}
	defer socket.Close()
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>